unit uBancoDAO;

interface


uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option, uBancoModel,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,  udmConexao, uUtil,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client;


  const
   pTable : string = 'BANCO';



type
 TBancoDAO = class
  private
    //class function ComandoSql(AReceber: TReceber): Boolean;

    class function getModel (query :TFDQuery) : TBancoModel;

  public
    {métodos CRUD (Create, Read, Update e Delete)
    para manipulação dos dados}
    class function Insert(value :TBancoModel): Boolean;
    class function obterPorID(value :TBancoModel): TBancoModel;
    class function Update(value :TBancoModel): Boolean;
    class function Delete(value :TBancoModel): Boolean;

  end;

implementation


class function TBancoDAO.Delete(value: TBancoModel): Boolean;
var
qryDelete : TFDQuery;
xResp :Boolean;
begin

xResp := False;
 dmConexao.conectarBanco;
 try

  qryDelete := TFDQuery.Create(nil);
  qryDelete.Close;
  qryDelete.Connection := dmConexao.conn;
  qryDelete.SQL.Clear;
  qryDelete.SQL.Add('DELETE FROM BANCO  '  );
  qryDelete.SQL.Add('WHERE ID_BANCO = :PID '  );
  qryDelete.ParamByName('PID').AsString := value.FID;

  qryDelete.ExecSQL;
  xResp := True;


 except
 xResp := False;
 raise Exception.Create('Erro ao tentar DELETAR ' + pTable);

 end;

  Result := xResp;
end;

class function TBancoDAO.getModel(query: TFDQuery): TBancoModel;
var model :TBancoModel;

begin

  if not query.IsEmpty then begin

    try

      model                 := TBancoModel.Create;
      model.FID             := query.FieldByName('ID_BANCO').AsString;
      model.FIDorganizacao  := query.FieldByName('ID_ORGANIZACAO').AsString;
      model.FCODIGO_BANCO   := query.FieldByName('CODIGO_BANCO').AsString;
      model.FNOME_BANCO     := query.FieldByName('NOME_BANCO').AsString;
      model.FSIGLA_BANCO    := query.FieldByName('SIGLA_BANCO').AsString;


    except
      raise Exception.Create('Erro ao tentar Converter ' + pTable);

    end;

  end;


   Result := model;

end;

class function TBancoDAO.Insert(value: TBancoModel): Boolean;
var
  qry: TFDQuery;
  cmdSql: string;
begin

  dmConexao.conectarBanco;
  try

     cmdSql := ' INSERT INTO BANCO (ID_BANCO, CODIGO_BANCO, NOME_BANCO, SIGLA_BANCO, ID_ORGANIZACAO) '+
               ' VALUES (:PID, :PCODIGO_BANCO, :PNOME_BANCO, :PSIGLA_BANCO, :PID_ORGANIZACAO) ';


          qry := TFDQuery.Create(nil);
          qry.Close;
          qry.Connection := dmConexao.conn;
          qry.SQL.Clear;
          qry.SQL.Add(cmdSql);


          qry.ParamByName('PID').AsString               := value.FID;
          qry.ParamByName('PIDORGANIZACAO').AsString    := value.FIDorganizacao;
          qry.ParamByName('PCODIGO_BANCO').AsString     := value.FCODIGO_BANCO;
          qry.ParamByName('PNOME_BANCO').AsString       := value.FNOME_BANCO;
          qry.ParamByName('PSIGLA_BANCO').AsString      := value.FSIGLA_BANCO;

         qry.ExecSQL;
         dmConexao.conn.CommitRetaining;


  except
   dmConexao.conn.RollbackRetaining;
    Result := False;
    raise Exception.Create('Erro ao tentar inserir ' + pTable);
  end;

  Result := System.True;
end;

class function TBancoDAO.obterPorID( value: TBancoModel): TBancoModel;
var
qryPesquisa : TFDQuery;
cmdSql:string;
model: TBancoModel;
begin

dmConexao.conectarBanco;
try
  qryPesquisa := TFDQuery.Create(nil);
  qryPesquisa.Close;
  qryPesquisa.Connection := dmConexao.conn;
  qryPesquisa.SQL.Clear;
  qryPesquisa.SQL.Add('SELECT * '  );
  qryPesquisa.SQL.Add('FROM BANCO  '  );
  qryPesquisa.SQL.Add('WHERE ID_ORGANIZACAO = :PIDORGANIZACAO  AND ID_BANCO = :PID '  );

  qryPesquisa.ParamByName('PIDORGANIZACAO').AsString := value.FIdOrganizacao;
  qryPesquisa.ParamByName('PID').AsString := value.FID;
  qryPesquisa.Open;

  if not qryPesquisa.IsEmpty then begin

      model := TBancoModel.Create;
      model := getModel(qryPesquisa);  end;


except
raise Exception.Create('Erro ao tentar obter ' + pTable );

end;

 Result := model;
end;

class function TBancoDAO.Update(value: TBancoModel): Boolean;
var
  qry: TFDQuery;
  cmdSql: string;
begin

  dmConexao.conectarBanco;
  try

     cmdSql :=     ' UPDATE BANCO '  +
                          ' SET ID_TIPO_BANCO =     :PIDTIPO, '+
                          '     ID_ENDERECO =         :PIDENDERECO,'+
                          '     ID_CONTATO =          :PIDCONTATO,'+
                          '     NOME =                :PNOME,'+
                          '     CPFCNPJ =             :PCNPJ,'+
                          '     PERSONALIDADE =       :PPERSONALIDADE,'+
                          '     CONTA_BANCARIA =      :PCONTA, '+
                          '     AGENCIA =             :PAGENCIA,'+
                          '     ID_BANCO =            :PIDBANCO,'+
                          '     CGA =                 :PCGA,'+
                          '     INSCRICAO_ESTADUAL  = :PINSCEST,'+
                          '     ID_CONTA_CONTABIL   = :PIDCONTACTB,'+
                          '     INSCRICAO_MUNICIPAL = :PINSCMUN, '+
                          '     ID_CARTAO_CREDITO   = :PIDCARTAO,'+
                          '     STATUS              = :PSTATUS, '+
                          '     DATA_ULTIMA_ATUALIZACAO = :PDATA,'+
                          '     CODIGO              = :PCODIGO '+
                          '     WHERE (ID_BANCO = :PID) AND (ID_ORGANIZACAO = :PIDORGANIZACAO) ';


          qry := TFDQuery.Create(nil);
          qry.Close;
          qry.Connection := dmConexao.conn;
          qry.SQL.Clear;
          qry.SQL.Add(cmdSql);


          qry.ParamByName('PID').AsString               := value.FID;
          qry.ParamByName('PIDORGANIZACAO').AsString    := value.FIDorganizacao;

          qry.ParamByName('PIDBANCO').AsString          := value.FIDbanco;
          qry.ParamByName('PIDTIPO').AsString           := value.FIDtipoCedente;
          qry.ParamByName('PIDENDERECO').AsString       := value.FIDendereco;
          qry.ParamByName('PIDCONTATO').AsString        := value.FIDcontato;
          qry.ParamByName('PIDCONTACTB').AsString       := value.FIDcontaContabil;
          qry.ParamByName('PIDCARTAO').AsString         := value.FIDcartaoCreditoModel;

          qry.ParamByName('PNOME').AsString             := UpperCase(value.Fnome);
          qry.ParamByName('PCNPJ').AsString             := value.FcpfCnpj;
          qry.ParamByName('PPERSONALIDADE').AsString    := value.Fpersonalidade;
          qry.ParamByName('PAGENCIA').AsString          := value.Fagencia;
          qry.ParamByName('PCONTA').AsString            := value.Fconta;
          qry.ParamByName('PCODIGO').AsString           := value.FCodigo;
          qry.ParamByName('PSTATUS').AsString           := value.FStatus;
          qry.ParamByName('PCGA').AsString              := value.Fcga;
          qry.ParamByName('PINSCEST').AsString          := value.FinscricaoEstadual;
          qry.ParamByName('PINSCMUN').AsString          := value.FinscricaoMunicipal;
          qry.ParamByName('PDATA').AsDate               := Now;

          if value.FIDcartaoCreditoModel = EmptyStr then
          begin
            qry.ParamByName('PIDCARTAO').Value := null;
          end;
          if value.FIDbanco = EmptyStr then
          begin
            qry.ParamByName('PIDBANCO').Value := null;
          end;
          if value.FIDendereco = EmptyStr then
          begin
            qry.ParamByName('PIDENDERECO').Value := null;
          end;
          if value.FIDcontato = EmptyStr then
          begin
            qry.ParamByName('PIDCONTATO').Value := null;
          end;
          if value.FIDcontaContabil = EmptyStr then
          begin
            qry.ParamByName('PIDCONTACTB').Value := null;
          end;

          if value.FCodigo = EmptyStr then
          begin
            qry.ParamByName('PCODIGO').AsString := obterCodigo;
          end;

    qry.ExecSQL;

  except
    Result := False;
    raise Exception.Create('Erro ao tentar alterar ' + pTable);
  end;

  Result := System.True;
end;
end.
