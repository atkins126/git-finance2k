unit uTituloPagarHistoricoDAO;

interface
 {


CREATE TABLE TITULO_PAGAR_HISTORICO (
    ID_TITULO_PAGAR_HISTORICO  VARCHAR(36) NOT NULL,
    ID_ORGANIZACAO             VARCHAR(36) NOT NULL,
    ID_HISTORICO               VARCHAR(36) NOT NULL,
    ID_TITULO_PAGAR            VARCHAR(36) NOT NULL,
    VALOR                      NUMERIC(10,2) NOT NULL,
    ID_CONTA_CONTABIL_DEBITO   VARCHAR(36)
);

}



uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,uTPBaixaModel, uFuncionarioModel, uCedenteModel, uCedenteDAO,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, uTituloPagarHistoricoModel,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, uHistoricoModel, uHistoricoDAO, uContaContabilModel, uContaContabilDAO, udmConexao, uUtil,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client;


  const
   pTable : string = 'TITULO_PAGAR_HISTORICO';
type
 TTituloPagarHistoricoDAO = class
  private
    class function getModel (query :TFDQuery) : TTituloPagarHistoricoModel;
  public
    {métodos CRUD (Create, Read, Update e Delete)
    para manipulação dos dados}
    class function Insert(value :TTituloPagarHistoricoModel): Boolean;
    class function obterPorID(value :TTituloPagarHistoricoModel): TTituloPagarHistoricoModel;
    class function Delete(value :TTituloPagarHistoricoModel): Boolean;

  end;

implementation

class function TTituloPagarHistoricoDAO.Delete(value: TTituloPagarHistoricoModel): Boolean;
var
qryDelete : TFDQuery;
xResp :Boolean;
begin

xResp := False;
 dmConexao.conectarBanco;
 try

  qryDelete := TFDQuery.Create(nil);
  qryDelete.Close;
  qryDelete.Connection := dmConexao.conn;
  qryDelete.SQL.Clear;
  qryDelete.SQL.Add('DELETE FROM '+pTable     );
  qryDelete.SQL.Add('WHERE ID_ORGANIZACAO = :PIDORGANIZACAO  AND  ID_'+pTable +  ' = :PID '  );
  qryDelete.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
  qryDelete.ParamByName('PID').AsString := value.FID;

  qryDelete.ExecSQL;
  xResp := True;


 except
 xResp := False;
 raise Exception.Create('Erro ao tentar DELETAR ' + pTable);

 end;

  Result := xResp;
end;

class function TTituloPagarHistoricoDAO.getModel(query: TFDQuery): TTituloPagarHistoricoModel;
var model :TTituloPagarHistoricoModel;
contaDB   : TContaContabilModel;
historico : THistoricoModel;

begin

  if not query.IsEmpty then begin

    try

      model                         := TTituloPagarHistoricoModel.Create;
      model.FID                     := query.FieldByName('ID_TESOURARIA_DEBITO').AsString;
      model.FIDorganizacao          := query.FieldByName('ID_ORGANIZACAO').AsString;
      model.FIDHistorico            := query.FieldByName('ID_HISTORICO').AsString;
      model.FIDContaContabilDebito  := query.FieldByName('ID_CONTA_CONTABIL_DEBITO').AsString;
      model.FIDTP                   := query.FieldByName('ID_TITULO_PAGAR').AsString;
      model.Fvalor                  := query.FieldByName('VALOR').AsCurrency;


        try

          {
          model.FTituloPagarBaixa                := TTPBaixaModel.Create;
          model.FTituloPagarBaixa.FID            := model.FIDTPB;
          model.FTituloPagarBaixa.FIDOrganizacao := model.FIDOrganizacao;
          model.FTituloPagarBaixa                := TCedenteDAO.obterPorID(model.FTituloPagarBaixa);
              referencia circular.. ver depois
             }


        except
          raise Exception.Create('Erro ao tentar obter Conta Contabil por ' + pTable);

        end;




    except
      raise Exception.Create('Erro ao tentar Converter ' + pTable);

    end;

  end;


   Result := model;

end;

class function TTituloPagarHistoricoDAO.Insert(value: TTituloPagarHistoricoModel): Boolean;
var
  qryInsert: TFDQuery;
  cmdDB: string;
begin
  dmConexao.conectarBanco;
  qryInsert := TFDQuery.Create(nil);
  try
    try

     cmdDB :=  ' INSERT INTO TITULO_PAGAR_HISTORICO '+
                ' (ID_TITULO_PAGAR_HISTORICO, ID_ORGANIZACAO, ID_HISTORICO,' +
                ' ID_TITULO_PAGAR, VALOR, ID_CONTA_CONTABIL_DEBITO) '+
                ' VALUES (:PID, :PIDORGANIZACAO,:PIDHIST, '+
                ' ::PIDTP, :PVALOR, :PIDCONTA ');


    qryInsert.Close;
    qryInsert.Connection := dmConexao.conn;
    qryInsert.SQL.Clear;
    qryInsert.SQL.Add(cmdDB);
    qryInsert.ParamByName('PIDTD').AsString :=value.FID;
    qryInsert.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
    qryInsert.ParamByName('PIDHIST').AsString := value.FIDHistorico;
    qryInsert.ParamByName('PIDRESPONSAVEL').AsString := value.FIDResponsavel;

    qryInsert.ParamByName('PIDCEDENTE').AsString := value.FIDCedente;
    qryInsert.ParamByName('PIDUSER').AsString := value.FIDUsuario;
    qryInsert.ParamByName('PIDCONTABANCO').AsString := value.FIDcontaBancariaCredito;
    qryInsert.ParamByName('PIDTITULO_PAGAR_BAIXA').AsString := value.FIDTPB;
    qryInsert.ParamByName('PIDLOTE_CONTABIL').AsString := value.FIDLoteContabil;
    qryInsert.ParamByName('PIDLOTE_DEPOSITO').AsString := value.FIDloteDeposito;

    qryInsert.ParamByName('PTIPO').AsString :=value.FtipoLancamento;
    qryInsert.ParamByName('PNUMDOC').AsString := value.FnumeroDocumento;
    qryInsert.ParamByName('PDESCRICAO').AsString := value.Fdescricao;
    qryInsert.ParamByName('PDTREGISTRO').AsDate := value.FdataRegistro;
    qryInsert.ParamByName('PDTCONTABIL').AsDate := value.FdataContabil;
    qryInsert.ParamByName('PDTMOVIMENTO').AsDate := value.FdataMovimento;
    qryInsert.ParamByName('PVALOR').AsCurrency := value.FvalorNominal   ;
    qryInsert.ParamByName('POBSERVACAO').AsString := value.Fobservacao;

    if uUtil.Empty(value.FID) then
    begin
      qryInsert.ParamByName('PID').AsString := dmConexao.obterNewID;
    end;

    if uUtil.Empty(value.FnumeroDocumento) then
    begin
      qryInsert.ParamByName('PNUMDOC').AsString := dmConexao.obterIdentificador(value.FIDorganizacao, 'TD');
     end;

    if uUtil.Empty(value.FIDloteContabil) then
    begin
      qryInsert.ParamByName('PIDLOTE_CONTABIL').Value := null;
    end;

    if uUtil.Empty(value.FIDTPB) then
    begin
      qryInsert.ParamByName('PIDTITULO_PAGAR_BAIXA').Value := null;
    end;

    if uUtil.Empty(value.FIDloteDeposito) then
    begin
      qryInsert.ParamByName('PIDLOTE_DEPOSITO').Value := null;
    end;

    if uUtil.Empty(value.FIDcontaBancariaCredito) then
    begin
      qryInsert.ParamByName('PIDCONTABANCO').Value := null;
    end;

    if uUtil.Empty(value.FIDUsuario) then
    begin
      qryInsert.ParamByName('PIDUSER').Value := null;

    end;

    if uUtil.Empty(value.FIDCedente) then
    begin
      qryInsert.ParamByName('PIDCEDENTE').Value := null;
    end;


     qryInsert.ExecSQL;
     dmConexao.conn.CommitRetaining;


  except
    Result := False;
     dmConexao.conn.RollbackRetaining;
    raise Exception.Create('Erro ao tentar inserir ' + pTable);
  end;

   Result := System.True;


  finally
    if Assigned(qryInsert) then
    begin
      FreeAndNil(qryInsert);
    end;
  end;



end;

class function TTituloPagarHistoricoDAO.obterPorID( value: TTituloPagarHistoricoModel): TTituloPagarHistoricoModel;
var
qryPesquisa : TFDQuery;
cmdSql:string;
model: TTituloPagarHistoricoModel;
begin
  dmConexao.conectarBanco;
  qryPesquisa := TFDQuery.Create(nil);
  try

    try

      qryPesquisa.Close;
      qryPesquisa.Connection := dmConexao.conn;
      qryPesquisa.SQL.Clear;
      qryPesquisa.SQL.Add('SELECT * ');
      qryPesquisa.SQL.Add('FROM ' + pTable);
      qryPesquisa.SQL.Add('WHERE (ID_ORGANIZACAO = :PIDORGANIZACAO ) AND  ID_' + pTable + ' = :PID ');

      qryPesquisa.ParamByName('PID').AsString := value.FID;
      qryPesquisa.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;

      qryPesquisa.Open;

      if not qryPesquisa.IsEmpty then
      begin

        model := TTituloPagarHistoricoModel.Create;
        model := getModel(qryPesquisa);
      end;

    except
      raise Exception.Create('Erro ao tentar obter ' + pTable);

    end;

    Result := model;

  finally
    if Assigned(qryPesquisa) then
    begin
      FreeAndNil(qryPesquisa);
    end;
  end;

end;
end.

