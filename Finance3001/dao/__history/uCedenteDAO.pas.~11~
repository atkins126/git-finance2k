unit uCedenteDAO;

interface


uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option, uCedenteModel,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,uContaContabilModel,uContaContabilDAO,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,  udmConexao, uUtil,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client;


  const
   pTable : string = 'CEDENTE';



type
 TCedenteDAO = class
  private
    //class function ComandoSql(AReceber: TReceber): Boolean;

    class function getModel (query :TFDQuery) : TCedenteModel;
  public
    {métodos CRUD (Create, Read, Update e Delete)
    para manipulação dos dados}
   class function Insert(value :TCedenteModel): Boolean;
    class function obterPorID(value :TCedenteModel): TCedenteModel;
    class function Update(value :TCedenteModel): Boolean;
    class function Delete(value :TCedenteModel): Boolean;

  end;

implementation

class function TCedenteDAO.Delete(value: TCedenteModel): Boolean;
var
qryDelete : TFDQuery;
xResp :Boolean;
begin

xResp := False;
 dmConexao.conectarBanco;
 try

  qryDelete := TFDQuery.Create(nil);
  qryDelete.Close;
  qryDelete.Connection := dmConexao.conn;
  qryDelete.SQL.Clear;
  qryDelete.SQL.Add('DELETE FROM CEDENTE  '  );
  qryDelete.SQL.Add('WHERE ID_ORGANIZACAO = :PIDORGANIZACAO  AND  ID_CEDENTE = :PID '  );
  qryDelete.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
  qryDelete.ParamByName('PID').AsString := value.FID;

  qryDelete.ExecSQL;
  xResp := True;


 except
 xResp := False;
 raise Exception.Create('Erro ao tentar DELETAR ' + pTable);

 end;

  Result := xResp;
end;

class function TCedenteDAO.getModel(query: TFDQuery): TCedenteModel;
var model :TCedenteModel;
 contaCtb : TContaContabilModel;
begin

  if not query.IsEmpty then begin

    try

      model                         := TCedenteModel.Create;
      model.FID                     := query.FieldByName('ID_CEDENTE').AsString;
      model.FIDorganizacao          := query.FieldByName('ID_ORGANIZACAO').AsString;
      model.FIDtipoCedente          := query.FieldByName('ID_TIPO_CEDENTE').AsString;
      model.FIDendereco             := query.FieldByName('ID_ENDERECO').AsString;
      model.FIdContaContabil        := query.FieldByName('ID_CONTA_CONTABIL').AsString;
      model.FIDcontato              := query.FieldByName('ID_CONTATO').AsString;
      model.FIDbanco                := query.FieldByName('ID_BANCO').AsString;
      model.Fagencia                := query.FieldByName('AGENCIA').AsString;
      model.Fconta                  := query.FieldByName('CONTA_BANCARIA').AsString;
      model.FCodigo                 := query.FieldByName('CODIGO').AsString;
      model.Fpersonalidade          := query.FieldByName('PERSONALIDADE').AsString;
      model.FStatus                 := query.FieldByName('STATUS').AsString;
      model.FcpfCnpj                := query.FieldByName('CPFCNPJ').AsString;
      model.Fnome                   := query.FieldByName('NOME').AsString;
      model.FinscricaoMunicipal     := query.FieldByName('INSCRICAO_MUNICIPAL').AsString;
      model.FinscricaoEstadual      := query.FieldByName('INSCRICAO_ESTADUAL').AsString;
      model.FDataUltimaAtualizacao  := query.FieldByName('DATA_ULTIMA_ATUALIZACAO').AsDateTime;
      model.FDataRegistro           := query.FieldByName('DATA_REGISTRO').AsDateTime;


    try
      contaCtb                := TContaContabilModel.Create;
      contaCtb.FID            := model.FIDcontaContabil;
      contaCtb.FIDorganizacao := model.FIDorganizacao;
      model.FcontaContabil    := TContaContabilDAO.obterPorID(contaCtb);

    except
      raise Exception.Create('Erro ao tentar obter Conta Contabil por ' + pTable);

    end;




    except
      raise Exception.Create('Erro ao tentar Converter ' + pTable);

    end;

  end;


   Result := model;

end;

class function TCedenteDAO.Insert(value: TCedenteModel): Boolean;
var
  qry: TFDQuery;
  cmdSql: string;
begin

  dmConexao.conectarBanco;
  try

     cmdSql := ' INSERT INTO CEDENTE ' +
               '(ID_CEDENTE, ID_ORGANIZACAO, ID_TIPO_CEDENTE, '+
               ' ID_ENDERECO, ID_CONTATO, NOME, CPFCNPJ, PERSONALIDADE, '+
               ' CONTA_BANCARIA, AGENCIA, ID_BANCO, CGA, '+
               ' INSCRICAO_ESTADUAL, ID_CONTA_CONTABIL, INSCRICAO_MUNICIPAL, '+
               ' ID_CARTAO_CREDITO, DATA_REGISTRO, DATA_ULTIMA_ATUALIZACAO, SACADO, STATUS,  CODIGO) '+
               ' VALUES (:PID_ENDERECO, :PID_CONTATO, :PNOME, :PCPFCNPJ, :PPERSONALIDADE, ' +
               '  :PCONTA_BANCARIA, :PAGENCIA, :PID_BANCO, :PCGA, '+
               '  :PINSCRICAO_ESTADUAL, :PID_CONTA_CONTABIL, :PINSCRICAO_MUNICIPAL, '+
               ' :PID_CARTAO_CREDITO, :PDATA_REGISTRO, :PDATA_ULTIMA_ATUALIZACAO, :PSACADO, :PSTATUS, :PCODIGO) ';



    qry := TFDQuery.Create(nil);
    qry.Close;
    qry.Connection := dmConexao.conn;
    qry.SQL.Clear;
    qry.SQL.Add(cmdSql);

    qry.ParamByName('PID').AsString                   := value.FID;
    qry.ParamByName('PIDORGANIZACAO').AsString        := value.FIDorganizacao;
    qry.ParamByName('PDESCRICAO').AsString            := value.FDescricao;
    qry.ParamByName('PTIPO').AsString                 := value.FTipo;
    qry.ParamByName('PCODIGO').AsInteger              := value.FCodigo;
    qry.ParamByName('PIDCONTA_CONTABIL').AsString     := value.FIdContaContabil ;
    qry.ParamByName('PDESC_REDUZ').AsString           := value.FdescricaoReduzida;
    qry.ParamByName('PPRODUTO').AsString              := value.FProduto;







    qry.ExecSQL;





  except
    Result := False;
    raise Exception.Create('Erro ao tentar inserir ' + pTable);
  end;

  Result := System.True;
end;

class function TCedenteDAO.obterPorID( value: TCedenteModel): TCedenteModel;
var
qryPesquisa : TFDQuery;
cmdSql:string;
model: TCedenteModel;
begin

dmConexao.conectarBanco;
try
  qryPesquisa := TFDQuery.Create(nil);
  qryPesquisa.Close;
  qryPesquisa.Connection := dmConexao.conn;
  qryPesquisa.SQL.Clear;
  qryPesquisa.SQL.Add('SELECT * '  );
  qryPesquisa.SQL.Add('FROM CEDENTE  '  );
  qryPesquisa.SQL.Add('WHERE ID_CEDENTE = :PID '  );

  qryPesquisa.ParamByName('PID').AsString := value.FID;
  qryPesquisa.Open;

  if not qryPesquisa.IsEmpty then begin

      model := TCedenteModel.Create;
      model := getModel(qryPesquisa);  end;


except
raise Exception.Create('Erro ao tentar obter ' + pTable );

end;

 Result := model;
end;

class function TCedenteDAO.Update(value: TCedenteModel): Boolean;
var
  qry: TFDQuery;
  cmdSql: string;
begin

  dmConexao.conectarBanco;
  try

     cmdSql := ' UPDATE CEDENTE ' +
               ' SET DESCRICAO            = :PDESCRICAO,'+
               '     TIPO                 = :PTIPO, '+
               '     CODIGO               = :PCODIGO, '+
               '     ID_CONTA_CONTABIL    = :PIDCONTA_CONTABIL,'+
               '     DESCRICAO_REDUZIDA   = :PDESC_REDUZ, '+
               '     PRODUTO              = :PPRODUTO '+
               ' WHERE (ID_CEDENTE = :PID) AND (ID_ORGANIZACAO = :PIDORGANIZACAO) ';



    qry := TFDQuery.Create(nil);
    qry.Close;
    qry.Connection := dmConexao.conn;
    qry.SQL.Clear;
    qry.SQL.Add(cmdSql);
    qry.ParamByName('PID').AsString                   := value.FID;
    qry.ParamByName('PIDORGANIZACAO').AsString        := value.FIDorganizacao;

    qry.ParamByName('PDESCRICAO').AsString            := value.FDescricao;
    qry.ParamByName('PTIPO').AsString                 := value.FTipo;
    qry.ParamByName('PCODIGO').AsInteger              := value.FCodigo;
    qry.ParamByName('PIDCONTA_CONTABIL').AsString     := value.FIdContaContabil ;
    qry.ParamByName('PDESC_REDUZ').AsString           := value.FdescricaoReduzida;
    qry.ParamByName('PPRODUTO').AsString              := value.FProduto;

    qry.ExecSQL;

  except
    Result := False;
    raise Exception.Create('Erro ao tentar alterar ' + pTable);
  end;

  Result := System.True;
end;
end.
