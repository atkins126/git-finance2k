unit uDMContaBancariaTransferencia;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, udmConexao,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
  TDataModule1 = class(TDataModule)
    qryObterPorPeriodo: TFDQuery;
  private
    { Private declarations }
     procedure inicializarDM(Sender: TObject);
  public
    { Public declarations }
    function obterPorPeriodo(pIdOrganizacao : String; dtDataInicial, dtDataFinal: TDateTime): Boolean;
  end;

var
  DataModule1: TDataModule1;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TDataModule1 }

procedure TDataModule1.inicializarDM(Sender: TObject);
begin

end;

function TDataModule1.obterPorPeriodo(pIdOrganizacao: String; dtDataInicial,
  dtDataFinal: TDateTime): Boolean;
begin

Result := false;

  inicializarDM(Self);

  if not qryObterPorTipoOperacao.Connection.Connected then
  begin
    qryObterPorTipoOperacao.Connection := dmConexao.Conn;
  end;

  qryObterPorTipoOperacao.Close;

  qryObterPorTipoOperacao.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
  qryObterPorTipoOperacao.ParamByName('PIDTIPOOPERACAO').AsString :=pIdTipoOperacao;
  qryObterPorTipoOperacao.ParamByName('DTDATAINICIAL').AsDateTime := dtDataInicial;
  qryObterPorTipoOperacao.ParamByName('DTDATAFINAL').AsDateTime := dtDataFinal;
  qryObterPorTipoOperacao.Open;

  Result := not qryObterPorTipoOperacao.IsEmpty;

end;

end.
