unit uFrameBairro;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uFrameGeneric, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client, Vcl.StdCtrls, udmConexao;

type
  TfrmBairro = class(TframeGeneric)
    qryObterCidade: TFDQuery;
    qryObterPorCidade: TFDQuery;
  private
    { Private declarations }
  public
    { Public declarations }

     function obterPorCidade(pIdValue:string) :string; //recebe o ID cidade

  end;

var
  frmBairro: TfrmBairro;

implementation

{$R *.dfm}


function TfrmBairro.obterPorCidade(pIdValue: string): string;
var cmd :String;
begin

  if not (Assigned(dmConexao)) then
  begin
    dmConexao := TdmConexao.Create(Self);
  end;


  Result := '0';
  cmd := ' SELECT B.ID_BAIRRO,B.ID_CIDADE, B.BAIRRO FROM BAIRRO B ' +
         ' WHERE (B.ID_CIDADE = :pId) ';


  if dmConexao.conectarBanco then
  begin

    qryObterPorCidade.Close;
    if not qryObterPorCidade.Connection.Connected then
    begin
      qryObterPorCidade.Connection := dmConexao.Conn;
    end;
    qryObterPorCidade.SQL.Clear;
    qryObterPorCidade.SQL.Add(cmd);
    qryObterPorCidade.ParamByName('pId').AsString := pIdValue;
    qryObterPorCidade.Open;

   Result := not qryObterPorCidade.IsEmpty


  end;
end;


end.
