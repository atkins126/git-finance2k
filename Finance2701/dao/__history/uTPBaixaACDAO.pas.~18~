unit uTPBaixaACDAO;

interface


uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,uTPBaixaACModel,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,uTipoAcrescimoModel,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, uHistoricoModel, uHistoricoDAO, udmConexao, uUtil,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client;


  const
   pTable : string = 'TITULO_PAGAR_BAIXA_AC';



type
 TTPBaixaACDAO = class
  private
    class function getModel (query :TFDQuery) : TTPBaixaACModel;
  public
    {métodos CRUD (Create, Read, Update e Delete)
    para manipulação dos dados}
    class function Insert(value :TTPBaixaACModel): Boolean;
    class function obterPorID(value :TTPBaixaACModel): TTPBaixaACModel;
    class function Update(value :TTPBaixaACModel): Boolean;
    class function Delete(value :TTPBaixaACModel): Boolean;

  end;

implementation

class function TTPBaixaACDAO.Delete(value: TTPBaixaACModel): Boolean;
var
qryDelete : TFDQuery;
xResp :Boolean;
begin

xResp := False;
 dmConexao.conectarBanco;
 try

  qryDelete := TFDQuery.Create(nil);
  qryDelete.Close;
  qryDelete.Connection := dmConexao.conn;
  qryDelete.SQL.Clear;
  qryDelete.SQL.Add('DELETE FROM '+pTable     );
  qryDelete.SQL.Add('WHERE ID_ORGANIZACAO = :PIDORGANIZACAO  AND  ID_'+pTable +  ' = :PID '  );
  qryDelete.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
  qryDelete.ParamByName('PID').AsString := value.FID;

  qryDelete.ExecSQL;
  xResp := True;


 except
 xResp := False;
 raise Exception.Create('Erro ao tentar DELETAR ' + pTable);

 end;

  Result := xResp;
end;

class function TTPBaixaACDAO.getModel(query: TFDQuery): TTPBaixaACModel;
var model :TTPBaixaACModel;
 historico : THistoricoModel;
begin

  if not query.IsEmpty then begin

    try

      model                     := TTPBaixaACModel.Create;
      model.FID                 := query.FieldByName('ID_TIPO_ACRESCIMO').AsString;
      model.FIDorganizacao      := query.FieldByName('ID_ORGANIZACAO').AsString;
      model.FIDtituloPagarBaixa := query.FieldByName('DESCRICAO').AsString;
      model.FIDtipoAcrescimo    := query.FieldByName('ID_HISTORICO').AsString;
      model.Fvalor              := query.FieldByName('ID_HISTORICO').AsCurrency;


          CREATE TABLE TITULO_PAGAR_BAIXA_AC (
              ID_TITULO_PAGAR_BAIXA_AC  VARCHAR(36) NOT NULL,
              ID_ORGANIZACAO            VARCHAR(36) NOT NULL,
              ID_TITULO_PAGAR_BAIXA     VARCHAR(36),
              ID_TIPO_ACRESCIMO         VARCHAR(36),
              VALOR                     NUMERIC(10,2) NOT NULL,
              CONTA_CONTABIL            VARCHAR(20),
              DIGITO_CONTA_CONTABIL     VARCHAR(1)
          );



    try
      historico                := THistoricoModel.Create;
      historico.FID            := model.FIDHistorico;
      historico.FIDorganizacao := model.FIDorganizacao;
      model.Fhistorico         := THistoricoDAO.obterPorID(historico);

    except
      raise Exception.Create('Erro ao tentar obter Conta Contabil por ' + pTable);

    end;




    except
      raise Exception.Create('Erro ao tentar Converter ' + pTable);

    end;

  end;


   Result := model;

end;

class function TTPBaixaACDAO.Insert(value: TTPBaixaACModel): Boolean;
var
  qry: TFDQuery;
  cmdSql: string;
begin

  dmConexao.conectarBanco;
  try

     cmdSql :=  ' INSERT INTO TITULO_PAGAR_BAIXA_AC '+
                ' (ID_TITULO_PAGAR_BAIXA_AC, ID_ORGANIZACAO, ID_TITULO_PAGAR_BAIXA, ID_TIPO_ACRESCIMO, VALOR ) '+
                ' VALUES (:PID, :PIDORGANIZACAO, :PIDBAIXA,:PIDTIPO_AC, PVALOR ) ';


    qry := TFDQuery.Create(nil);
    qry.Close;
    qry.Connection := dmConexao.conn;
    qry.SQL.Clear;
    qry.SQL.Add(cmdSql);
    qry.ParamByName('PID').AsString                   := value.FID;
    qry.ParamByName('PIDORGANIZACAO').AsString        := value.FIDorganizacao;
    qry.ParamByName('PIDTIPO_AC').AsString            := value.FIDtipoAcrescimo;
    qry.ParamByName('PIDBAIXA').AsString              := value.FIDtituloPagarBaixa;
    qry.ParamByName('PVALOR').AsCurrency              := value.Fvalor ;
    qry.ExecSQL;


  except
    Result := False;
    raise Exception.Create('Erro ao tentar inserir ' + pTable);
  end;

  Result := System.True;
end;

class function TTPBaixaACDAO.obterPorID( value: TTPBaixaACModel): TTPBaixaACModel;
var
qryPesquisa : TFDQuery;
cmdSql:string;
model: TTPBaixaACModel;
begin

dmConexao.conectarBanco;
try
  qryPesquisa := TFDQuery.Create(nil);
  qryPesquisa.Close;
  qryPesquisa.Connection := dmConexao.conn;
  qryPesquisa.SQL.Clear;
  qryPesquisa.SQL.Add('SELECT * '  );
  qryPesquisa.SQL.Add('FROM ' + pTable  );
  qryPesquisa.SQL.Add('WHERE ID_'+pTable+ ' = :PID '  );

  qryPesquisa.ParamByName('PID').AsString := value.FID;
  qryPesquisa.Open;

  if not qryPesquisa.IsEmpty then begin

      model := TTPBaixaACModel.Create;
      model := getModel(qryPesquisa);  end;


except
raise Exception.Create('Erro ao tentar obter ' + pTable );

end;

 Result := model;
end;

class function TTPBaixaACDAO.Update(value: TTPBaixaACModel): Boolean;
var
  qry: TFDQuery;
  cmdSql: string;
begin

  dmConexao.conectarBanco;
  try

     cmdSql := ' UPDATE TITULO_PAGAR_BAIXA_AC '+
               ' SET ID_TITULO_PAGAR_BAIXA = :PIDBAIXA, '+
               '     ID_TIPO_ACRESCIMO = :PIDTIPO_AC,'+
               '     VALOR = :PVALOR '+
               ' WHERE (ID_TITULO_PAGAR_BAIXA_AC = :PID) AND (ID_ORGANIZACAO = :PIDORGANIZACAO) ';

    qry := TFDQuery.Create(nil);
    qry.Close;
    qry.Connection := dmConexao.conn;
    qry.SQL.Clear;
    qry.SQL.Add(cmdSql);
    qry.ParamByName('PID').AsString                   := value.FID;
    qry.ParamByName('PIDORGANIZACAO').AsString        := value.FIDorganizacao;
    qry.ParamByName('PIDTIPO_AC').AsString            := value.FIDtipoAcrescimo;
    qry.ParamByName('PIDBAIXA').AsString              := value.FIDtituloPagarBaixa;
    qry.ParamByName('PVALOR').AsCurrency              := value.Fvalor ;
    qry.ExecSQL;


  except
    Result := False;
    raise Exception.Create('Erro ao tentar alterar ' + pTable);
  end;

  Result := System.True;
end;
end.
