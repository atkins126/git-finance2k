unit uContaBancariaDebitoDAO;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,uContaBancariaDBModel,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,uContaContabilModel,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, uContaBancariaModel, udmConexao, uUtil,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
 TContaBancariaDebitoDAO = class
  private

  public
    {métodos CRUD (Create, Read, Update e Delete)
    para manipulação dos dados}


    class function Insert(tContaDB :TContaBancariaDBModel): Boolean;
    class function obterPorID(tContaDB :TContaBancariaDBModel): TContaBancariaDBModel;
  //  class function Update(tContaDB :TContaBancariaDBModel): Boolean;
  //  class function Delete(tContaDB :TContaBancariaDBModel): Boolean;

  end;

implementation

{ TContaBancariaDebitoDAO }

class function TContaBancariaDebitoDAO.Insert(tContaDB: TContaBancariaDBModel): Boolean;
var
cmdSql:string;
qryInsert : TFDQuery;
xResp :Boolean;
begin
xResp := False;
 dmConexao.conectarBanco;
 try

    cmdSql := ' INSERT INTO CONTA_BANCARIA_DEBITO '+
              ' (ID_CONTA_BANCARIA_DEBITO, ID_ORGANIZACAO, ID_CONTA_BANCARIA, '+
              ' ID_TIPO_OPERACAO_BANCARIA, ID_RESPONSAVEL, ID_TITULO_PAGAR, '+
              ' ID_CONTA_BANCARIA_CHEQUE, ID_LOTE_CONTABIL, ID_USUARIO, TIPO_LANCAMENTO, '+
              ' OBSERVACAO, DESCRICAO, VALOR, DATA_REGISTRO, DATA_MOVIMENTO, IDENTIFICACAO )'+
              ' VALUES (:PID, :PIDORGANIZACAO, :PIDCONTABANCARIA, '+
              ' :PIDTOB, :PIDRESP, :PIDTP, '+
              ' :PIDCHEQUE, :PIDLOTECONTABIL, :PIDUSUARIO, :PTIPOLANCAMENTO, '+
              ' :POBS, :PDESCRICAO, :PVALOR,:PDTREGISTRO, :PDTMOVIMENTO, :PIDENTIFICACAO  ) ';


  qryInsert := TFDQuery.Create(nil);
  qryInsert.Close;
  qryInsert.Connection := dmConexao.conn;
  qryInsert.SQL.Clear;
  qryInsert.SQL.Add(cmdSql);
  qryInsert.ParamByName('PID').AsString               := tContaDB.FID;
  qryInsert.ParamByName('PIDORGANIZACAO').AsString    := tContaDB.FIDorganizacao;
  qryInsert.ParamByName('PIDCONTABANCARIA').AsString  := tContaDB.FIDcontaBancaria;
  qryInsert.ParamByName('PIDTOB').AsString            := tContaDB.FIDTOB;
  qryInsert.ParamByName('PIDRESP').AsString           := tContaDB.FIDResponsavel;
  qryInsert.ParamByName('PIDTP').AsString             := tContaDB.FIDTP;
  qryInsert.ParamByName('PIDCHEQUE').AsString         := tContaDB.FIDCheque;
  qryInsert.ParamByName('PIDLOTECONTABIL').AsString   := tContaDB.FIDloteContabil;
  qryInsert.ParamByName('PIDUSUARIO').AsString        := tContaDB.FIDusuario;
  qryInsert.ParamByName('PTIPOLANCAMENTO').AsString   := tContaDB.FtipoLancamento;
  qryInsert.ParamByName('POBS').AsString              := tContaDB.Fobservacao;
  qryInsert.ParamByName('PDESCRICAO').AsString        := tContaDB.Fdescricao;
  qryInsert.ParamByName('PIDENTIFICACAO').AsString    := tContaDB.Fidentificacao;
  qryInsert.ParamByName('PDTREGISTRO').AsDateTime     := tContaDB.FdataRegistro;
  qryInsert.ParamByName('PDTMOVIMENTO').AsDateTime    := tContaDB.FdataMovimento;
  qryInsert.ParamByName('PVALOR').AsCurrency          := tContaDB.Fvalor;

  qryInsert.ExecSQL;



 except
 raise Exception.Create('Erro ao tentar inserir CBD');

 end;


  Result := xResp;
end;

class function TContaBancariaDebitoDAO.obterPorID( tContaDB: TContaBancariaDBModel): TContaBancariaDBModel;
var
qryPesquisa : TFDQuery;

contaDB: TContaBancariaDBModel;
begin
dmConexao.conectarBanco;
try
  qryPesquisa := TFDQuery.Create(nil);
  qryPesquisa.Close;
  qryPesquisa.Connection := dmConexao.conn;
  qryPesquisa.SQL.Clear;
  qryPesquisa.SQL.Add('SELECT * '  );
  qryPesquisa.SQL.Add('FROM CONTA_BANCARIA_DEBITO  '  );
  qryPesquisa.SQL.Add('WHERE ID_ORGANIZACAO = :PIDORGANIZACAO  AND  ID_CONTA_BANCARIA_DEBITO = :PID '  );

  qryPesquisa.ParamByName('PIDORGANIZACAO').AsString := tContaDB.FIDorganizacao;
  qryPesquisa.ParamByName('PID').AsString := tContaDB.FID;
  qryPesquisa.Open;

  if not qryPesquisa.IsEmpty then begin

      contaDB                  := TContaBancariaDBModel.Create;
      contaDB.FID              := qryPesquisa.FieldByName('ID_CONTA_BANCARIA_DEBITO').AsString;
      contaDB.FIDorganizacao   := qryPesquisa.FieldByName('ID_ORGANIZACAO').AsString;
      contaDB.FIDcontaBancaria := qryPesquisa.FieldByName('ID_CONTA_BANCARIA').AsString;
      contaDB.FIDusuario       := qryPesquisa.FieldByName('ID_USUARIO').AsString;
      contaDB.FIDTOB           := qryPesquisa.FieldByName('ID_TIPO_OPERACAO_BANCARIA').AsString;
      contaDB.FIDResponsavel   := qryPesquisa.FieldByName('ID_RESPONSAVEL').AsString;
      contaDB.FIDTP            := qryPesquisa.FieldByName('ID_TITULO_PAGAR').AsString;
      contaDB.FIDCheque        := qryPesquisa.FieldByName('ID_CONTA_BANCARIA_CHEQUE').AsString;
      contaDB.Fobservacao      := qryPesquisa.FieldByName('OBSERVACAO').AsString;
      contaDB.FIDloteContabil  := qryPesquisa.FieldByName('ID_LOTE_CONTABIL').AsString;
      contaDB.FtipoLancamento  := qryPesquisa.FieldByName('TIPO_LANCAMENTO').AsString;
      contaDB.Fdescricao       := qryPesquisa.FieldByName('DESCRICAO').AsString;
      contaDB.Fidentificacao   := qryPesquisa.FieldByName('IDENTIFICACAO').AsString;
      contaDB.FdataRegistro   := qryPesquisa.FieldByName('DATA_REGISTRO').AsDateTime;
      contaDB.FdataMovimento   := qryPesquisa.FieldByName('DATA_MOVIMENTO').AsDateTime;
      contaDB.Fvalor           := qryPesquisa.FieldByName('VALOR').AsCurrency;


  end;


except
raise Exception.Create('Erro ao tentar obter CONTA BANCARIA DB ');

end;

 Result := contaDB;
end;


end.
